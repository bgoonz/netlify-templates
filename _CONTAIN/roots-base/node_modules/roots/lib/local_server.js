// Generated by CoffeeScript 1.9.1
(function() {
  var Server, charge, path, serve_static;

  path = require('path');

  serve_static = require('serve-static');

  charge = require('charge');


  /**
   * @class Server
   * @classdesc Serves up a roots project locally, handles live reloading
   */

  Server = (function() {

    /**
     * Creates a new instance of the server
     *
     * @param  {Function} roots - roots class instance
     * @param  {String} dir - directory to serve
     */
    function Server(project) {
      this.project = project;
    }


    /**
     * Start the local server on the given port.
     *
     * @param  {Integer} port - number of port to start the server on
     * @return {Promise} promise for the server object
     */

    Server.prototype.start = function(port, cb) {
      var app, opts, ref;
      opts = (ref = this.project.config.server) != null ? ref : {};
      opts.log = false;
      if (this.project.config.env === 'development') {
        opts.write = {
          content: "<!-- roots development configuration --> <script>var __livereload = " + this.project.config.live_reload + ";</script> <script src='/__roots__/main.js'></script>"
        };
        opts.cache_control = {
          '**': 'max-age=0, no-cache, no-store'
        };
      }
      app = charge(this.project.config.output_path(), opts);
      if (this.project.config.env === 'development') {
        app.stack.splice(app.stack.length - 2, 0, {
          route: '/__roots__',
          handle: serve_static(path.resolve(__dirname, 'browser'))
        });
      }
      return this.server = app.start(port, cb);
    };


    /**
     * Close the server and remove it.
     */

    Server.prototype.stop = function(cb) {
      this.server.close(cb);
      return delete this.server;
    };


    /**
     * Send a message through websockets to the browser.
     *
     * @param  {String} k - message key
     * @param  {*} v - message value
     */

    Server.prototype.send_msg = function(k, v) {
      return this.server.send({
        type: k,
        data: v
      });
    };


    /**
     * These three methods send 'reload', 'compiling', and 'error' messages
     * through to the browser.
     */

    Server.prototype.reload = function() {
      return this.send_msg('reload');
    };

    Server.prototype.compiling = function() {
      return this.send_msg('compiling');
    };

    Server.prototype.show_error = function(err) {
      if (err instanceof Error) {
        err = err.toString();
      }
      return this.send_msg('error', err);
    };

    return Server;

  })();

  module.exports = Server;

}).call(this);
