// Generated by CoffeeScript 1.9.1
(function() {
  var W, _, create, deploy, destroy, lookup, netlify, node, preview_domain;

  netlify = require('netlify');

  W = require('when');

  node = require('when/node');

  _ = require('lodash');

  preview_domain = ".netlify.com";

  module.exports = function(root, config) {
    var client, d;
    d = W.defer();
    if (!config.access_token) {
      return d.reject('missing access_token!');
    }
    client = netlify.createClient({
      access_token: config.access_token
    });
    W()["with"]({
      root: root,
      client: client,
      config: config,
      d: d
    }).then(lookup).then(function(site) {
      if (site) {
        return site;
      } else {
        return create.call(this);
      }
    }).then(deploy).done(function(site) {
      return d.resolve({
        deployer: 'netlify',
        url: site.url,
        destroy: destroy.bind(this, site.site_id)
      });
    }, d.reject);
    return d.promise;
  };

  module.exports.config = {
    required: ['name', 'access_token']
  };


  /**
   * Checks to see if your site is already on netlify or not. Returns either a
   * site object or undefined.
   * @return {Promise} promise for either undefined or a site object
   */

  lookup = function() {
    var id;
    id = this.config.name.indexOf(preview_domain) !== -1 ? this.config.name : this.config.name + preview_domain;
    return node.call(this.client.site.bind(this.client), id)["catch"](function() {
      return null;
    });
  };


  /**
   * Creates a new site on netlify with a given name.
   * @return {Promise} promise for a newly created site object
   */

  create = function() {
    this.d.notify("Creating '" + this.config.name + "' on netlify");
    return node.call(this.client.createSite.bind(this.client), {
      name: this.config.name
    });
  };


  /**
   * Creates a new deploy for a given site with the contents of the root.
   * @param {Object} site - a bit object from netlify
   * @return {Promise} a promise for a finished deployment
   */

  deploy = function(site) {
    this.d.notify("Deploying '" + this.config.name + "'");
    return node.call(site.createDeploy.bind(site), {
      dir: this.root
    }).then(function(deploy) {
      return node.call(deploy.waitForReady.bind(deploy));
    });
  };


  /**
   * Deletes a given site from netlify.
   * @param  {Object} site - a site object from netlify
   * @return {Promise} a promise for the deleted site
   */

  destroy = function(id) {
    return node.call(this.client.site.bind(this.client), id).then(function(site) {
      return node.call(site.destroy.bind(site));
    });
  };

}).call(this);
