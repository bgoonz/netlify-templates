// Generated by CoffeeScript 1.9.1
(function() {
  var ArgParse, CLI, EventEmitter, Ship, path, pkg, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  path = require('path');

  pkg = require('../package.json');

  ArgParse = require('argparse').ArgumentParser;

  EventEmitter = require('events').EventEmitter;

  util = require('util');

  Ship = require('./index');


  /**
   * @class  CLI
   * @classdesc command line interface to ship
   */

  CLI = (function(superClass) {
    var deploy;

    extend(CLI, superClass);


    /**
     * Sets up the arguments and program info through argparse
     * @param  {Object} opts - additional options, currently only debug
     */

    function CLI(opts) {
      var ref;
      if (opts == null) {
        opts = {};
      }
      this.parser = new ArgParse({
        version: pkg.version,
        description: pkg.description,
        debug: (ref = opts.debug) != null ? ref : false
      });
      this.parser.addArgument(['-to', '--to'], {
        help: "Where you'd like to deploy your site to"
      });
      this.parser.addArgument(['-e', '--env'], {
        help: "The environment you'd like to deploy to"
      });
      this.parser.addArgument(['-c', '--conf'], {
        help: "Path to the folder containing your ship.conf file"
      });
      this.parser.addArgument(['root'], {
        nargs: '?',
        defaultValue: process.cwd(),
        help: "Path to the folder you'd like to deploy, defaults to pwd"
      });
    }


    /**
     * Execute the deploy through the cli with the provided argument, configuring
     * if necessary.
     *
     * @param  {Array|String} args - array or space-separated string of arguments
     * @return {Promise} promise for completed and configured deploy
     */

    CLI.prototype.run = function(args) {
      var err, ship;
      if (typeof args === 'string') {
        args = args.split(' ');
      }
      args = this.parser.parseArgs(args);
      try {
        ship = new Ship({
          root: args.root,
          deployer: args.to,
          env: args.env,
          conf: args.conf
        });
      } catch (_error) {
        err = _error;
        return this.emit('err', err);
      }
      if (!ship.is_configured()) {
        return ship.config_prompt()["with"](ship).then(function() {
          return ship.write_config();
        }).then(deploy.bind(this, ship));
      } else {
        return deploy.call(this, ship);
      }
    };


    /**
     * Run a deploy, monitor the progress, and finish up emitting the right info
     * through the cli.
     *
     * @param  {Ship} ship - a Ship instance
     * @return {Promise} promise for a finished deploy
     */

    deploy = function(ship) {
      return ship.deploy().progress(this.emit.bind(this, 'info')).done((function(_this) {
        return function(res) {
          _this.emit("success", "deploy to " + res.deployer + " successful!");
          if (res.url) {
            return _this.emit("success", "Live at: " + res.url);
          }
        };
      })(this), this.emit.bind(this, 'err'));
    };

    return CLI;

  })(EventEmitter);

  module.exports = CLI;

}).call(this);
